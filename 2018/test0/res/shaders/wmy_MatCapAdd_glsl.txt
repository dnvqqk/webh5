<WmyGlsl name="wmy_MatCapAdd_glsl">
    <renderMode />
    <attributeMap>
        <data name="a_Position" v0="laya.d3.graphics.Vertex.VertexMesh.MESH_POSITION0" />
        <data name="a_Color" v0="laya.d3.graphics.Vertex.VertexMesh.MESH_COLOR0" />
        <data name="a_Normal" v0="laya.d3.graphics.Vertex.VertexMesh.MESH_NORMAL0" />
        <data name="a_Texcoord0" v0="laya.d3.graphics.Vertex.VertexMesh.MESH_TEXTURECOORDINATE0" />
        <data name="a_Texcoord1" v0="laya.d3.graphics.Vertex.VertexMesh.MESH_TEXTURECOORDINATE1" />
        <data name="a_BoneWeights" v0="laya.d3.graphics.Vertex.VertexMesh.MESH_BLENDWEIGHT0" />
        <data name="a_BoneIndices" v0="laya.d3.graphics.Vertex.VertexMesh.MESH_BLENDINDICES0" />
        <data name="a_Tangent0" v0="laya.d3.graphics.Vertex.VertexMesh.MESH_TANGENT0" />
    </attributeMap>
    <uniformMap>
        <data name="u_Bones" v0="laya.d3.core.SkinnedMeshSprite3D.BONES" v1="laya.d3.shader.Shader3D.PERIOD_CUSTOM" />
        <data name="u_DiffuseTexture" v0="laya.d3.core.material.BlinnPhongMaterial.ALBEDOTEXTURE" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="u_SpecularTexture" v0="laya.d3.core.material.BlinnPhongMaterial.SPECULARTEXTURE" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="u_NormalTexture" v0="laya.d3.core.material.BlinnPhongMaterial.NORMALTEXTURE" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="u_AlphaTestValue" v0="laya.d3.core.material.BaseMaterial.ALPHATESTVALUE" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="u_DiffuseColor" v0="laya.d3.core.material.BlinnPhongMaterial.ALBEDOCOLOR" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="u_MaterialSpecular" v0="laya.d3.core.material.BlinnPhongMaterial.MATERIALSPECULAR" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="u_Shininess" v0="laya.d3.core.material.BlinnPhongMaterial.SHININESS" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="u_TilingOffset" v0="laya.d3.core.material.BlinnPhongMaterial.TILINGOFFSET" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="u_WorldMat" v0="Laya.Sprite3D.WORLDMATRIX" v1="laya.d3.shader.Shader3D.PERIOD_SPRITE" />
        <data name="u_MvpMatrix" v0="Laya.Sprite3D.MVPMATRIX" v1="laya.d3.shader.Shader3D.PERIOD_SPRITE" />
        <data name="u_LightmapScaleOffset" v0="Laya.RenderableSprite3D.LIGHTMAPSCALEOFFSET" v1="laya.d3.shader.Shader3D.PERIOD_SPRITE" />
        <data name="u_LightMap" v0="Laya.RenderableSprite3D.LIGHTMAP" v1="laya.d3.shader.Shader3D.PERIOD_SPRITE" />
        <data name="u_CameraPos" v0="laya.d3.core.BaseCamera.CAMERAPOS" v1="laya.d3.shader.Shader3D.PERIOD_CAMERA" />
        <data name="u_ReflectTexture" v0="laya.d3.core.scene.Scene3D.REFLECTIONTEXTURE" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_ReflectIntensity" v0="laya.d3.core.scene.Scene3D.REFLETIONINTENSITY" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_FogStart" v0="laya.d3.core.scene.Scene3D.FOGSTART" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_FogRange" v0="laya.d3.core.scene.Scene3D.FOGRANGE" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_FogColor" v0="laya.d3.core.scene.Scene3D.FOGCOLOR" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_DirectionLight.Color" v0="laya.d3.core.scene.Scene3D.LIGHTDIRCOLOR" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_DirectionLight.Direction" v0="laya.d3.core.scene.Scene3D.LIGHTDIRECTION" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_PointLight.Position" v0="laya.d3.core.scene.Scene3D.POINTLIGHTPOS" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_PointLight.Range" v0="laya.d3.core.scene.Scene3D.POINTLIGHTRANGE" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_PointLight.Color" v0="laya.d3.core.scene.Scene3D.POINTLIGHTCOLOR" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_SpotLight.Position" v0="laya.d3.core.scene.Scene3D.SPOTLIGHTPOS" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_SpotLight.Direction" v0="laya.d3.core.scene.Scene3D.SPOTLIGHTDIRECTION" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_SpotLight.Range" v0="laya.d3.core.scene.Scene3D.SPOTLIGHTRANGE" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_SpotLight.Spot" v0="laya.d3.core.scene.Scene3D.SPOTLIGHTSPOTANGLE" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_SpotLight.Color" v0="laya.d3.core.scene.Scene3D.SPOTLIGHTCOLOR" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_AmbientColor" v0="laya.d3.core.scene.Scene3D.AMBIENTCOLOR" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_shadowMap1" v0="laya.d3.core.scene.Scene3D.SHADOWMAPTEXTURE1" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_shadowMap2" v0="laya.d3.core.scene.Scene3D.SHADOWMAPTEXTURE2" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_shadowMap3" v0="laya.d3.core.scene.Scene3D.SHADOWMAPTEXTURE3" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_shadowPSSMDistance" v0="laya.d3.core.scene.Scene3D.SHADOWDISTANCE" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_lightShadowVP" v0="laya.d3.core.scene.Scene3D.SHADOWLIGHTVIEWPROJECT" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_shadowPCFoffset" v0="laya.d3.core.scene.Scene3D.SHADOWMAPPCFOFFSET" v1="laya.d3.shader.Shader3D.PERIOD_SCENE" />
        <data name="u_AlbedoColor" v0="laya.d3.core.material.UnlitMaterial.ALBEDOCOLOR" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="u_AlbedoTexture" v0="laya.d3.core.material.UnlitMaterial.ALBEDOTEXTURE" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="u_EmissionTexture" v0="laya.d3.core.material.PBRStandardMaterial.EMISSIONTEXTURE" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="u_EmissionColor" v0="laya.d3.core.material.PBRStandardMaterial.EMISSIONCOLOR" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_MainTex" v0="100" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_MainTex_ST" v0="101" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_BumpMap" v0="102" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_BumpMap_ST" v0="103" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_MatCap" v0="104" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_MatCap_ST" v0="105" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_AOMap" v0="106" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_AOMap_ST" v0="107" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
    </uniformMap>
    <SubShader>
        <Pass>
            <cull />
            <VERTEX>
//--wmy-uniform+varying------

uniform sampler2D _MainTex;
uniform sampler2D _AOMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform vec4 _MainTex_ST;
uniform vec4 _BumpMap_ST;

varying vec2  _MainTexUv;
varying vec2 _BumpMapUv;
varying vec3 worldNorm;

//--wmy----------------------

attribute vec4 a_Position;
uniform mat4 u_MvpMatrix;

attribute vec2 a_Texcoord0;
varying vec2 v_Texcoord0;
attribute vec2 a_Texcoord1;

#ifdef LIGHTMAP
	uniform vec4 u_LightmapScaleOffset;
	varying vec2 v_LightMapUV;
#endif

attribute vec4 a_Color;
varying vec4 v_Color;

#ifdef BONE
	const int c_MaxBoneCount = 24;
	attribute vec4 a_BoneIndices;
	attribute vec4 a_BoneWeights;
	uniform mat4 u_Bones[c_MaxBoneCount];
#endif

attribute vec3 a_Normal;
varying vec3 v_Normal; 
uniform vec3 u_CameraPos;
varying vec3 v_ViewDir;

#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&amp;&amp;defined(NORMALMAP)
	attribute vec4 a_Tangent0;
	varying vec3 v_Tangent;
	varying vec3 v_Binormal;
#endif

uniform mat4 u_WorldMat;
varying vec3 v_PositionWorld;

varying float v_posViewZ;
#ifdef RECEIVESHADOW
  #ifdef SHADOWMAP_PSSM1 
  varying vec4 v_lightMVPPos;
  uniform mat4 u_lightShadowVP[4];
  #endif
#endif

uniform vec4 u_TilingOffset;

void main_castShadow()
{
	#ifdef BONE
		mat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;
		skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;
		skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;
		skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;
		vec4 position=skinTransform*a_Position;
		gl_Position = u_MvpMatrix * position;
	#else
		gl_Position = u_MvpMatrix * a_Position;
	#endif
	 
	//TODO没考虑UV动画呢
	#if defined(DIFFUSEMAP)&amp;&amp;defined(ALPHATEST)
		v_Texcoord0=a_Texcoord0;
	#endif
		v_posViewZ = gl_Position.z;
}

mat3 inverse(mat3 m) {
  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

  float b01 = a22 * a11 - a12 * a21;
  float b11 = -a22 * a10 + a12 * a20;
  float b21 = a21 * a10 - a11 * a20;

  float det = a00 * b01 + a01 * b11 + a02 * b21;

  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;
}

void main_normal()
{
	#ifdef BONE
		mat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;
		skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;
		skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;
		skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;
		vec4 position=skinTransform*a_Position;
		gl_Position = u_MvpMatrix * position;
	#else
		gl_Position = u_MvpMatrix * a_Position;
	#endif

	mat3 worldInvMat;
	#ifdef BONE
		worldInvMat=inverse(mat3(u_WorldMat*skinTransform));
	#else
		worldInvMat=inverse(mat3(u_WorldMat));
	#endif  
	v_Normal=a_Normal*worldInvMat;
	#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&amp;&amp;defined(NORMALMAP)
		v_Tangent=a_Tangent0.xyz*worldInvMat;
		v_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;
	#endif

	#ifdef BONE
		v_PositionWorld=(u_WorldMat*position).xyz;
	#else
		v_PositionWorld=(u_WorldMat*a_Position).xyz;
	#endif
	
	v_ViewDir=u_CameraPos-v_PositionWorld;

	#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&amp;&amp;(defined(SPECULARMAP)||defined(NORMALMAP)))
		v_Texcoord0=a_Texcoord0;
		#ifdef TILINGOFFSET
			v_Texcoord0=vec2(v_Texcoord0.x,v_Texcoord0.y-1.0)*u_TilingOffset.xy+vec2(u_TilingOffset.z,-u_TilingOffset.w);
			v_Texcoord0.y+=1.0;
		#endif
	#endif

	#ifdef LIGHTMAP
		#ifdef SCALEOFFSETLIGHTINGMAPUV
			#ifdef UV1
				v_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;
			#else
				v_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;
			#endif 
			v_LightMapUV.y=1.0-v_LightMapUV.y;
		#else
			#ifdef UV1
				v_LightMapUV=a_Texcoord1;
			#else
				v_LightMapUV=a_Texcoord0;
			#endif 
		#endif 
	#endif

	v_Color=a_Color;

	#ifdef RECEIVESHADOW
		v_posViewZ = gl_Position.w;
		#ifdef SHADOWMAP_PSSM1 
			v_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);
		#endif
	#endif
}

//--wmy-main-----------------
void wmyMain(){

 _MainTexUv=vec2(a_Texcoord0);
 _MainTexUv= _MainTex_ST.xy *  _MainTexUv.xy +  _MainTex_ST.zw;
_BumpMapUv=vec2(a_Texcoord0);
_BumpMapUv=_BumpMap_ST.xy * _BumpMapUv.xy + _BumpMap_ST.zw;
worldNorm = (-u_WorldMat * vec4(a_Normal, 0.0)).xyz;

}
//--wmy----------------------
void main()
{
	#ifdef CASTSHADOW
		main_castShadow();
	#else
		main_normal();
		wmyMain();
	#endif
}
</VERTEX>
            <FRAGMENT>
#ifdef HIGHPRECISION
	precision highp float;
#else
	precision mediump float;
#endif
#include "Lighting.glsl";
//--wmy-uniform+varying------

uniform sampler2D _MainTex;
uniform sampler2D _AOMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform vec4 _MainTex_ST;
uniform vec4 _BumpMap_ST;

varying vec2  _MainTexUv;
varying vec2 _BumpMapUv;
varying vec3 worldNorm;

//--wmy----------------------

uniform vec4 u_DiffuseColor;
varying vec4 v_Color;
varying vec3 v_ViewDir;

#ifdef ALPHATEST
	uniform float u_AlphaTestValue;
#endif

#ifdef DIFFUSEMAP
	uniform sampler2D u_DiffuseTexture;
#endif

#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&amp;&amp;(defined(SPECULARMAP)||defined(NORMALMAP)))
	varying vec2 v_Texcoord0;
#endif

#ifdef LIGHTMAP
	varying vec2 v_LightMapUV;
	uniform sampler2D u_LightMap;
#endif

uniform sampler2D u_SpecularTexture;

#ifdef FOG
	uniform float u_FogStart;
	uniform float u_FogRange;
	uniform vec3 u_FogColor;
#endif

varying vec3 v_Normal;

uniform sampler2D u_NormalTexture;
varying vec3 v_Tangent;
varying vec3 v_Binormal;

#ifdef DIRECTIONLIGHT
	uniform DirectionLight u_DirectionLight;
#endif

#ifdef POINTLIGHT
	uniform PointLight u_PointLight;
#endif

#ifdef SPOTLIGHT
	uniform SpotLight u_SpotLight;
#endif

uniform vec3 u_AmbientColor;

#if defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)
	varying vec3 v_PositionWorld;
#endif

#include "ShadowHelper.glsl"
varying float v_posViewZ;
#ifdef RECEIVESHADOW
	#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)
		uniform mat4 u_lightShadowVP[4];
	#endif
	#ifdef SHADOWMAP_PSSM1 
		varying vec4 v_lightMVPPos;
	#endif
#endif

void main_castShadow()
{
	//gl_FragColor=vec4(v_posViewZ,0.0,0.0,1.0);
	gl_FragColor=packDepth(v_posViewZ);
	#if defined(DIFFUSEMAP)&amp;&amp;defined(ALPHATEST)
		float alpha = texture2D(u_DiffuseTexture,v_Texcoord0).w;
		if( alpha &lt; u_AlphaTestValue )
		{
			discard;
		}
	#endif
}

//--wmy-main-----------------
vec4 wmyMain(vec4 _mainColor, vec3 _globalDiffuse){
vec4 wmyColor=_mainColor;

vec4 tex=texture2D(_MainTex,_MainTexUv);
vec4 _AOTex=texture2D(_AOMap, _MainTexUv);
vec4 bmap = texture2D(_BumpMap, _BumpMapUv);
vec2 normal= vec2(0.0);
normal.xy= bmap.wy * 2.0 - 1.0;
normal *= 0.01;
vec2 capCoord=vec2(0.0);
vec2 norm = vec2(worldNorm);
norm *= 0.95;
capCoord.x = norm.x - normal.x;
capCoord.y = norm.y - normal.y*-1.0;
vec2 matCapUv = (capCoord * 0.5 + 0.5);
vec4 matcap = texture2D(_MatCap, matCapUv) * 2.0;
vec4 mc = (tex + matcap - 1.05) * _AOTex;
wmyColor= mc;

return wmyColor;
}
//--wmy----------------------
void main_normal()
{
	vec3 globalDiffuse=u_AmbientColor;
	#ifdef LIGHTMAP	
		globalDiffuse += DecodeLightmap(texture2D(u_LightMap, v_LightMapUV));
	#endif
	
	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)
		vec3 normal;
		#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&amp;&amp;defined(NORMALMAP)
			vec3 normalMapSample = texture2D(u_NormalTexture, v_Texcoord0).rgb;
			normal = normalize(NormalSampleToWorldSpace(normalMapSample, v_Normal, v_Tangent,v_Binormal));
		#else
			normal = normalize(v_Normal);
		#endif
		vec3 viewDir= normalize(v_ViewDir);
	#endif
	
	vec4 mainColor=u_DiffuseColor;
	#ifdef DIFFUSEMAP
		vec4 difTexColor=texture2D(u_DiffuseTexture, v_Texcoord0);
		mainColor=mainColor*difTexColor;
	#endif 
	#ifdef COLOR
		mainColor=mainColor*v_Color;
	#endif 
    
	#ifdef ALPHATEST
		if(mainColor.a&lt;u_AlphaTestValue)
			discard;
	#endif
  
	
	vec3 diffuse = vec3(0.0);
	vec3 specular= vec3(0.0);
	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)
		vec3 dif,spe;
		#ifdef SPECULARMAP
			vec3 gloss=texture2D(u_SpecularTexture, v_Texcoord0).rgb;
		#else
			#ifdef DIFFUSEMAP
				vec3 gloss=vec3(difTexColor.a);
			#else
				vec3 gloss=vec3(1.0);
			#endif
		#endif
	#endif

	
	#ifdef DIRECTIONLIGHT
		LayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_DirectionLight,dif,spe);
		diffuse+=dif;
		specular+=spe;
	#endif
 
	#ifdef POINTLIGHT
		LayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_PointLight,dif,spe);
		diffuse+=dif;
		specular+=spe;
	#endif

	#ifdef SPOTLIGHT
		LayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_SpotLight,dif,spe);
		diffuse+=dif;
		specular+=spe;
	#endif
  
	#ifdef RECEIVESHADOW
		float shadowValue = 1.0;
		#ifdef SHADOWMAP_PSSM3
			shadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);
		#endif
		#ifdef SHADOWMAP_PSSM2
			shadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);
		#endif 
		#ifdef SHADOWMAP_PSSM1
			shadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);
		#endif
		//gl_FragColor =vec4(mainColor.rgb * (globalDiffuse + diffuse * shadowValue * 1.1), mainColor.a);
		gl_FragColor = wmyMain(mainColor,(globalDiffuse + diffuse * shadowValue * 1.1));
	#else
		//gl_FragColor =vec4(mainColor.rgb * globalDiffuse , mainColor.a);
		gl_FragColor = wmyMain(mainColor, globalDiffuse);
	#endif
  
	#ifdef FOG
		float lerpFact=clamp((0.85/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);
		gl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);
	#endif
}

void main()
{
	#ifdef CASTSHADOW		
		main_castShadow();
	#else
		main_normal();
	#endif  
}

</FRAGMENT>
        </Pass>
    </SubShader>
</WmyGlsl>