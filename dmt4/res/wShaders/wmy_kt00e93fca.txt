
/*wmy
11/30/2018 3:44:35 PM
*/
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wmy_shader = (function (_super) {
    __extends(wmy_shader, _super);
    function wmy_shader() {
        //shader名字
        this.shaderName='wmy_kt';
        //
        _super.call(this);
        
        this._uniformMap={
			'_Color':[1000],
			'_MainTex':[1001],
			'_MainTex_ST':[1002],
			'_OutlineColor':[1003],
			'_Outline':[1004],
			'_Factor':[1005],
			'_ToonEffect':[1006],
			'_Specular':[1007],
			'_Gloss':[1008],
		};

        this.vspsArr=[];
        
//pass0-------------------------------------------------------------------
this.vspsArr[0]=[];
//vs
this.vspsArr[0][0]=`
uniform vec4 _OutlineColor;uniform float _Outline;uniform float _Factor;



void wmyMain(){

vec3 dir = v_Position;vec3 dir2 = a_Normal;float D = dot(dir, dir2);dir = dir*sign(D);dir = dir * _Factor + dir2*(1.0 - _Factor);float oLine = _Outline;if (oLine <= 0.0)oLine=0.015;vec4 p = vec4(v_Position, 1.0) + vec4((dir * oLine),0.0);gl_Position = u_MvpMatrix * p;

}
`
//ps
this.vspsArr[0][1]=`
uniform vec4 _OutlineColor;uniform float _Outline;uniform float _Factor;



vec4 wmyMain(vec4 _mainColor, vec3 _globalDiffuse){
    vec4 wmyColor=_mainColor;

wmyColor = _OutlineColor;

//
return wmyColor;
}
`
//渲染模式
this.vspsArr[0][2]={
	'depthWrite':true,
	'cull':Laya.RenderState.CULL_FRONT,
};
        
//pass1-------------------------------------------------------------------
this.vspsArr[1]=[];
//vs
this.vspsArr[1][0]=`
uniform vec4 _Color;uniform sampler2D _MainTex;uniform float _ToonEffect;uniform vec4 _Specular;uniform float _Gloss;

varying vec3 g_worldNormal;varying vec3 g_worldViewDir;varying vec2 texUvCoord;

void wmyMain(){

g_worldNormal = v_Normal;g_worldViewDir = v_ViewDir;texUvCoord = vec2(a_Texcoord0);

}
`
//ps
this.vspsArr[1][1]=`
uniform vec4 _Color;uniform sampler2D _MainTex;uniform float _ToonEffect;uniform vec4 _Specular;uniform float _Gloss;

varying vec3 g_worldNormal;varying vec3 g_worldViewDir;varying vec2 texUvCoord;

vec4 wmyMain(vec4 _mainColor, vec3 _globalDiffuse){
    vec4 wmyColor=_mainColor;

	vec3 ambient = u_AmbientColor;	vec3 lightDir = normalize(u_DirectionLight.Direction.xyz);	float diff = max(0.0, dot(g_worldNormal, lightDir));	diff = (diff + 1.0) / 2.0;	diff = smoothstep(0.0, 1.0, diff);	diff = lerpF(diff, 1.0, _ToonEffect);	vec4 diffuseColor = texture2D(_MainTex, vec2(texUvCoord));	vec3 color = _Color.rgb * diffuseColor.rgb *  diff;	color *= u_DirectionLight.Color.rgb;	if (_Gloss > 0.0) {		vec3 viewDir = g_worldViewDir;		vec3 halfDir = normalize(viewDir + lightDir);		vec3 specular = vec3(0.0);		specular = _Specular.rgb * pow(max(dot(g_worldNormal, halfDir), 0.0), _Gloss);		color += specular;	}	color += ambient/2.0;	wmyColor = vec4(color, 1.0);

//
return wmyColor;
}
`
//渲染模式
this.vspsArr[1][2]={
	'cull':Laya.RenderState.CULL_BACK,
};
        
        _super.prototype.setUniformMap.call(this, this._uniformMap);
        for (let i = 0; i < this.vspsArr.length; i++) {
            const vsps = this.vspsArr[i];
            _super.prototype.setVsPs.call(this, vsps[0], vsps[1], vsps[2]);
        }
        _super.prototype.init.call(this);
    }
    return wmy_shader;
}(_WmyShader));
new wmy_shader();
