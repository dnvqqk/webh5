(function (window,document,Laya) {
var _WmyShader = (function () {
    _WmyShader.prototype._setVs = function (vs) {
        if(vs==null)return "";
        if(vs.indexOf("wmyMain(")<0)return vs;
        var _Vs=`
#include "Lighting.glsl";

attribute vec4 a_Position;
uniform mat4 u_MvpMatrix;

attribute vec2 a_Texcoord0;
#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))||(defined(LIGHTMAP)&&defined(UV))
    varying vec2 v_Texcoord0;
#endif

#if defined(LIGHTMAP)&&defined(UV1)
    attribute vec2 a_Texcoord1;
#endif

#ifdef LIGHTMAP
    uniform vec4 u_LightmapScaleOffset;
    varying vec2 v_LightMapUV;
#endif

#ifdef COLOR
    attribute vec4 a_Color;
    varying vec4 v_Color;
#endif

#ifdef BONE
    const int c_MaxBoneCount = 24;
    attribute vec4 a_BoneIndices;
    attribute vec4 a_BoneWeights;
    uniform mat4 u_Bones[c_MaxBoneCount];
#endif

attribute vec3 a_Normal;
varying vec3 v_Normal; 
uniform vec3 u_CameraPos;
varying vec3 v_ViewDir; 
attribute vec4 a_Tangent0;
varying mat3 worldInvMat;
varying vec3 v_Position;

varying vec3 v_Tangent;
varying vec3 v_Binormal;

uniform mat4 u_WorldMat;
varying vec3 v_PositionWorld;

varying float v_posViewZ;
#ifdef RECEIVESHADOW
    #ifdef SHADOWMAP_PSSM1 
    varying vec4 v_lightMVPPos;
    uniform mat4 u_lightShadowVP[4];
    #endif
#endif

#ifdef TILINGOFFSET
    uniform vec4 u_TilingOffset;
#endif

void main_castShadow()
{
    #ifdef BONE
        mat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;
        skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;
        skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;
        skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;
        vec4 position=skinTransform*a_Position;
        v_Position=position.xyz;
        gl_Position = u_MvpMatrix * position;
    #else
        v_Position=a_Position.xyz;
        gl_Position = u_MvpMatrix * a_Position;
    #endif
        
    //TODO没考虑UV动画呢
    #if defined(DIFFUSEMAP)&&defined(ALPHATEST)
        v_Texcoord0=a_Texcoord0;
    #endif
        v_posViewZ = gl_Position.z;
}

mat3 inverse(mat3 m) {
    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
    float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
    float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

    float b01 = a22 * a11 - a12 * a21;
    float b11 = -a22 * a10 + a12 * a20;
    float b21 = a21 * a10 - a11 * a20;

    float det = a00 * b01 + a01 * b11 + a02 * b21;

    return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
                b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
                b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;
}

void main_normal()
{
    #ifdef BONE
        mat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;
        skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;
        skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;
        skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;
        vec4 position=skinTransform*a_Position;
        v_Position=position.xyz;
        gl_Position = u_MvpMatrix * position;
    #else
        v_Position=a_Position.xyz;
        gl_Position = u_MvpMatrix * a_Position;
    #endif

    #ifdef BONE
        worldInvMat=inverse(mat3(u_WorldMat*skinTransform));
    #else
        worldInvMat=inverse(mat3(u_WorldMat));
    #endif  
    v_Normal=a_Normal*worldInvMat;

    v_Tangent=a_Tangent0.xyz*worldInvMat;
    v_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;

    #ifdef BONE
        v_PositionWorld=(u_WorldMat*position).xyz;
    #else
        v_PositionWorld=(u_WorldMat*a_Position).xyz;
    #endif
    
    v_ViewDir=u_CameraPos-v_PositionWorld;

    #if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))
        v_Texcoord0=a_Texcoord0;
        #ifdef TILINGOFFSET
            v_Texcoord0=TransformUV(v_Texcoord0,u_TilingOffset);
        #endif
    #endif

    #ifdef LIGHTMAP
        #ifdef SCALEOFFSETLIGHTINGMAPUV
            #ifdef UV1
                v_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;
            #else
                v_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;
            #endif 
            v_LightMapUV.y=1.0-v_LightMapUV.y;
        #else
            #ifdef UV1
                v_LightMapUV=a_Texcoord1;
            #else
                v_LightMapUV=a_Texcoord0;
            #endif 
        #endif 
    #endif

    #if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)
        v_Color=a_Color;
    #endif

    #ifdef RECEIVESHADOW
        v_posViewZ = gl_Position.w;
        #ifdef SHADOWMAP_PSSM1 
            v_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);
        #endif
    #endif
}

//--wmy-main-----------------
mat3 MATRIX_IT_MV(mat4 ModelViewMatrix) {
    return inverse(mat3(ModelViewMatrix));
}
mat3 getRotation(vec4 wTangent, vec3 wNormal) {
    vec3 binormal = cross(wNormal.xyz, wTangent.xyz) * -wTangent.w;
    mat3 rotation = mat3(
        wTangent.x, binormal.x, wNormal.x,
        wTangent.y, binormal.y, wNormal.y,
        wTangent.z, binormal.z, wNormal.z);
    return rotation;
}
${vs}
//--wmy----------------------

void main()
{
    #ifdef CASTSHADOW
        main_castShadow();
    #else
        main_normal();
        wmyMain();
    #endif
}        
        `;
        return _Vs;
    }

    return _WmyShader;
}());

})(window,document,Laya)
window["_WmyShader"]=_WmyShader;
