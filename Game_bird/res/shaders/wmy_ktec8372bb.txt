<WmyGlsl name="kt">
    <renderMode />
    <attributeMap />
    <uniformMap>
        <data name="_Color" v0="100" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_MainTex" v0="101" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_MainTex_ST" v0="102" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_OutlineColor" v0="103" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_Outline" v0="104" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_Factor" v0="105" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_ToonEffect" v0="106" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_Specular" v0="107" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
        <data name="_Gloss" v0="108" v1="laya.d3.shader.Shader3D.PERIOD_MATERIAL" />
    </uniformMap>
    <SubShader>
        <Pass>
            <cull v="Laya.RenderState.CULL_FRONT" />
            <zWrite v="on" />
            <blend />
            <VS><![CDATA[
// < > ! @ # $ % ^ & * ( ) { } [ ] \ /
//--wmy-uniform+varying------

uniform vec4 _OutlineColor;uniform float _Outline;uniform float _Factor;



//--wmy----------------------

#include "Lighting.glsl";

attribute vec4 a_Position;
uniform mat4 u_MvpMatrix;

attribute vec2 a_Texcoord0;
#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))||(defined(LIGHTMAP)&&defined(UV))
	varying vec2 v_Texcoord0;
#endif

#if defined(LIGHTMAP)&&defined(UV1)
	attribute vec2 a_Texcoord1;
#endif

#ifdef LIGHTMAP
	uniform vec4 u_LightmapScaleOffset;
	varying vec2 v_LightMapUV;
#endif

#ifdef COLOR
	attribute vec4 a_Color;
	varying vec4 v_Color;
#endif

#ifdef BONE
	const int c_MaxBoneCount = 24;
	attribute vec4 a_BoneIndices;
	attribute vec4 a_BoneWeights;
	uniform mat4 u_Bones[c_MaxBoneCount];
#endif

attribute vec3 a_Normal;
varying vec3 v_Normal; 
uniform vec3 u_CameraPos;
varying vec3 v_ViewDir; 
attribute vec4 a_Tangent0;
varying mat3 worldInvMat;
varying vec3 v_Position;

#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)
  varying vec3 v_Tangent;
	varying vec3 v_Binormal;
#endif

uniform mat4 u_WorldMat;
varying vec3 v_PositionWorld;

varying float v_posViewZ;
#ifdef RECEIVESHADOW
  #ifdef SHADOWMAP_PSSM1 
  varying vec4 v_lightMVPPos;
  uniform mat4 u_lightShadowVP[4];
  #endif
#endif

#ifdef TILINGOFFSET
	uniform vec4 u_TilingOffset;
#endif

void main_castShadow()
{
	#ifdef BONE
		mat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;
		skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;
		skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;
		skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;
		vec4 position=skinTransform*a_Position;
		v_Position=position.xyz;
		gl_Position = u_MvpMatrix * position;
	#else
		v_Position=a_Position.xyz;
		gl_Position = u_MvpMatrix * a_Position;
	#endif
	 
	//TODO没考虑UV动画呢
	#if defined(DIFFUSEMAP)&&defined(ALPHATEST)
		v_Texcoord0=a_Texcoord0;
	#endif
		v_posViewZ = gl_Position.z;
}

mat3 inverse(mat3 m) {
  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

  float b01 = a22 * a11 - a12 * a21;
  float b11 = -a22 * a10 + a12 * a20;
  float b21 = a21 * a10 - a11 * a20;

  float det = a00 * b01 + a01 * b11 + a02 * b21;

  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;
}

void main_normal()
{
	#ifdef BONE
		mat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;
		skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;
		skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;
		skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;
		vec4 position=skinTransform*a_Position;
		v_Position=position.xyz;
		gl_Position = u_MvpMatrix * position;
	#else
		v_Position=a_Position.xyz;
		gl_Position = u_MvpMatrix * a_Position;
	#endif

	#ifdef BONE
		worldInvMat=inverse(mat3(u_WorldMat*skinTransform));
	#else
		worldInvMat=inverse(mat3(u_WorldMat));
	#endif  
	v_Normal=a_Normal*worldInvMat;

	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)
		#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)
			v_Tangent=a_Tangent0.xyz*worldInvMat;
			v_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;
		#endif
	#endif

	#ifdef BONE
		v_PositionWorld=(u_WorldMat*position).xyz;
	#else
		v_PositionWorld=(u_WorldMat*a_Position).xyz;
	#endif
	
	v_ViewDir=u_CameraPos-v_PositionWorld;

	#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))
		v_Texcoord0=a_Texcoord0;
		#ifdef TILINGOFFSET
			v_Texcoord0=TransformUV(v_Texcoord0,u_TilingOffset);
		#endif
	#endif

	#ifdef LIGHTMAP
		#ifdef SCALEOFFSETLIGHTINGMAPUV
			#ifdef UV1
				v_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;
			#else
				v_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;
			#endif 
			v_LightMapUV.y=1.0-v_LightMapUV.y;
		#else
			#ifdef UV1
				v_LightMapUV=a_Texcoord1;
			#else
				v_LightMapUV=a_Texcoord0;
			#endif 
		#endif 
	#endif

	#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)
		v_Color=a_Color;
	#endif

	#ifdef RECEIVESHADOW
		v_posViewZ = gl_Position.w;
		#ifdef SHADOWMAP_PSSM1 
			v_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);
		#endif
	#endif
}

//--wmy-main-----------------
mat3 MATRIX_IT_MV(mat4 ModelViewMatrix) {
	return inverse(mat3(ModelViewMatrix));
}
mat3 getRotation(vec4 wTangent, vec3 wNormal) {
	vec3 binormal = cross(wNormal.xyz, wTangent.xyz) * wTangent.w;
	mat3 rotation = mat3(
		wTangent.x, -binormal.x, wNormal.x,
		wTangent.y, -binormal.y, wNormal.y,
		wTangent.z, binormal.z, wNormal.z);
	return rotation;
}
void wmyMain(){

vec3 dir = v_Position;vec3 dir2 = a_Normal;float D = dot(dir, dir2);dir = dir*sign(D);dir = dir * _Factor + dir2*(1.0 - _Factor);float oLine = _Outline;if (oLine <= 0.0)oLine=0.015;vec4 p = vec4(v_Position, 1.0) + vec4((dir * oLine),0.0);gl_Position = u_MvpMatrix * p;

}
//--wmy----------------------

void main()
{
	#ifdef CASTSHADOW
		main_castShadow();
	#else
		main_normal();
		wmyMain();
	#endif
}

]]></VS>
            <PS><![CDATA[
#ifdef HIGHPRECISION
	precision highp float;
#else
	precision mediump float;
#endif

#include "Lighting.glsl";

//--wmy-uniform+varying------

uniform vec4 _OutlineColor;uniform float _Outline;uniform float _Factor;



//--wmy----------------------

uniform vec4 u_DiffuseColor;

#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)
	varying vec4 v_Color;
#endif

varying vec3 v_ViewDir; 

#ifdef ALPHATEST
	uniform float u_AlphaTestValue;
#endif

#ifdef DIFFUSEMAP
	uniform sampler2D u_DiffuseTexture;
#endif



#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))
	varying vec2 v_Texcoord0;
#endif

#ifdef LIGHTMAP
	varying vec2 v_LightMapUV;
	uniform sampler2D u_LightMap;
#endif

#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)
	uniform vec3 u_MaterialSpecular;
	uniform float u_Shininess;
	#ifdef SPECULARMAP 
		uniform sampler2D u_SpecularTexture;
	#endif
#endif

#ifdef FOG
	uniform float u_FogStart;
	uniform float u_FogRange;
	uniform vec3 u_FogColor;
#endif

varying vec3 v_Normal;
varying vec3 v_Position;

#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)
	uniform sampler2D u_NormalTexture;
	varying vec3 v_Tangent;
	varying vec3 v_Binormal;
#endif

#ifdef DIRECTIONLIGHT
	uniform DirectionLight u_DirectionLight;
#endif

#ifdef POINTLIGHT
	uniform PointLight u_PointLight;
#endif

#ifdef SPOTLIGHT
	uniform SpotLight u_SpotLight;
#endif

uniform vec3 u_AmbientColor;


#if defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)
	varying vec3 v_PositionWorld;
#endif

#include "ShadowHelper.glsl"
varying float v_posViewZ;
#ifdef RECEIVESHADOW
	#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)
		uniform mat4 u_lightShadowVP[4];
	#endif
	#ifdef SHADOWMAP_PSSM1 
		varying vec4 v_lightMVPPos;
	#endif
#endif

void main_castShadow()
{
	//gl_FragColor=vec4(v_posViewZ,0.0,0.0,1.0);
	gl_FragColor=packDepth(v_posViewZ);
	#if defined(DIFFUSEMAP)&&defined(ALPHATEST)
		float alpha = texture2D(u_DiffuseTexture,v_Texcoord0).w;
		if( alpha < u_AlphaTestValue )
		{
			discard;
		}
	#endif
}


//--wmy-main-----------------
vec4 lerpV4(vec4 a, vec4 b, float s) { return vec4(a + (b - a)*s); }
vec3 lerpV3(vec3 a, vec3 b, float s) { return vec3(a + (b - a)*s); }
vec2 lerpV2(vec2 a, vec2 b, float s) { return vec2(a + (b - a)*s); }
float lerpF(float a, float b, float s) { return float(a + (b - a) * s); }
float saturate(float n) { return clamp(n, 0.0, 1.0); }
vec3 UnpackNormal(vec4 packednormal) {
	// This do the trick
	packednormal.x *= packednormal.w;
	vec3 normal;
	normal.xy = packednormal.xy * 2.0 - 1.0;
	normal.z = sqrt(1.0 - saturate(dot(normal.xy, normal.xy)));
	return normal;
}
vec4 wmyMain(vec4 _mainColor, vec3 _globalDiffuse){
vec4 wmyColor=_mainColor;

wmyColor = _OutlineColor;

return wmyColor;
}
//--wmy----------------------

void main_normal()
{
	vec3 globalDiffuse=u_AmbientColor;
	#ifdef LIGHTMAP	
		globalDiffuse += DecodeLightmap(texture2D(u_LightMap, v_LightMapUV));
	#endif
	
	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)
		vec3 normal;
		#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)
			vec3 normalMapSample = texture2D(u_NormalTexture, v_Texcoord0).rgb;
			normal = normalize(NormalSampleToWorldSpace(normalMapSample, v_Normal, v_Tangent,v_Binormal));
		#else
			normal = normalize(v_Normal);
		#endif
		vec3 viewDir= normalize(v_ViewDir);
	#endif
	
	vec4 mainColor=u_DiffuseColor;
	#ifdef DIFFUSEMAP
		vec4 difTexColor=texture2D(u_DiffuseTexture, v_Texcoord0);
		mainColor=mainColor*difTexColor;
	#endif 
	#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)
		mainColor=mainColor*v_Color;
	#endif 
    
	#ifdef ALPHATEST
		if(mainColor.a<u_AlphaTestValue)
			discard;
	#endif
  
	
	vec3 diffuse = vec3(0.0);
	vec3 specular= vec3(0.0);
	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)
		vec3 dif,spe;
		#ifdef SPECULARMAP
			vec3 gloss=texture2D(u_SpecularTexture, v_Texcoord0).rgb;
		#else
			#ifdef DIFFUSEMAP
				vec3 gloss=vec3(difTexColor.a);
			#else
				vec3 gloss=vec3(1.0);
			#endif
		#endif
	#endif

	
	#ifdef DIRECTIONLIGHT
		LayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_DirectionLight,dif,spe);
		diffuse+=dif;
		specular+=spe;
	#endif
 
	#ifdef POINTLIGHT
		LayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_PointLight,dif,spe);
		diffuse+=dif;
		specular+=spe;
	#endif

	#ifdef SPOTLIGHT
		LayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_SpotLight,dif,spe);
		diffuse+=dif;
		specular+=spe;
	#endif
	
	#ifdef RECEIVESHADOW
		float shadowValue = 1.0;
		#ifdef SHADOWMAP_PSSM3
			shadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);
		#endif
		#ifdef SHADOWMAP_PSSM2
			shadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);
		#endif 
		#ifdef SHADOWMAP_PSSM1
			shadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);
		#endif
		//gl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse)*shadowValue,mainColor.a);
		gl_FragColor = wmyMain(mainColor,(globalDiffuse + diffuse * shadowValue * 1.1));
	#else
		//gl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse),mainColor.a);
		gl_FragColor = wmyMain(mainColor, globalDiffuse);
	#endif
  /*
	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)
		#ifdef RECEIVESHADOW
			gl_FragColor.rgb+=specular*shadowValue;
		#else
			gl_FragColor.rgb+=specular;
		#endif
	#endif
	*/
	#ifdef FOG
		float lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);
		gl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);
	#endif
}

void main()
{
	#ifdef CASTSHADOW		
		main_castShadow();
	#else
		main_normal();
	#endif  
}
 
]]></PS>
        </Pass>
        <Pass>
            <cull v="Laya.RenderState.CULL_BACK" />
            <zWrite v="" />
            <blend v="" />
            <VS><![CDATA[
// < > ! @ # $ % ^ & * ( ) { } [ ] \ /
//--wmy-uniform+varying------

uniform vec4 _Color;uniform sampler2D _MainTex;uniform float _ToonEffect;uniform vec4 _Specular;uniform float _Gloss;

varying vec3 g_worldNormal;varying vec3 g_worldViewDir;varying vec2 texUvCoord;

//--wmy----------------------

#include "Lighting.glsl";

attribute vec4 a_Position;
uniform mat4 u_MvpMatrix;

attribute vec2 a_Texcoord0;
#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))||(defined(LIGHTMAP)&&defined(UV))
	varying vec2 v_Texcoord0;
#endif

#if defined(LIGHTMAP)&&defined(UV1)
	attribute vec2 a_Texcoord1;
#endif

#ifdef LIGHTMAP
	uniform vec4 u_LightmapScaleOffset;
	varying vec2 v_LightMapUV;
#endif

#ifdef COLOR
	attribute vec4 a_Color;
	varying vec4 v_Color;
#endif

#ifdef BONE
	const int c_MaxBoneCount = 24;
	attribute vec4 a_BoneIndices;
	attribute vec4 a_BoneWeights;
	uniform mat4 u_Bones[c_MaxBoneCount];
#endif

attribute vec3 a_Normal;
varying vec3 v_Normal; 
uniform vec3 u_CameraPos;
varying vec3 v_ViewDir; 
attribute vec4 a_Tangent0;
varying mat3 worldInvMat;
varying vec3 v_Position;

#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)
  varying vec3 v_Tangent;
	varying vec3 v_Binormal;
#endif

uniform mat4 u_WorldMat;
varying vec3 v_PositionWorld;

varying float v_posViewZ;
#ifdef RECEIVESHADOW
  #ifdef SHADOWMAP_PSSM1 
  varying vec4 v_lightMVPPos;
  uniform mat4 u_lightShadowVP[4];
  #endif
#endif

#ifdef TILINGOFFSET
	uniform vec4 u_TilingOffset;
#endif

void main_castShadow()
{
	#ifdef BONE
		mat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;
		skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;
		skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;
		skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;
		vec4 position=skinTransform*a_Position;
		v_Position=position.xyz;
		gl_Position = u_MvpMatrix * position;
	#else
		v_Position=a_Position.xyz;
		gl_Position = u_MvpMatrix * a_Position;
	#endif
	 
	//TODO没考虑UV动画呢
	#if defined(DIFFUSEMAP)&&defined(ALPHATEST)
		v_Texcoord0=a_Texcoord0;
	#endif
		v_posViewZ = gl_Position.z;
}

mat3 inverse(mat3 m) {
  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

  float b01 = a22 * a11 - a12 * a21;
  float b11 = -a22 * a10 + a12 * a20;
  float b21 = a21 * a10 - a11 * a20;

  float det = a00 * b01 + a01 * b11 + a02 * b21;

  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;
}

void main_normal()
{
	#ifdef BONE
		mat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;
		skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;
		skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;
		skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;
		vec4 position=skinTransform*a_Position;
		v_Position=position.xyz;
		gl_Position = u_MvpMatrix * position;
	#else
		v_Position=a_Position.xyz;
		gl_Position = u_MvpMatrix * a_Position;
	#endif

	#ifdef BONE
		worldInvMat=inverse(mat3(u_WorldMat*skinTransform));
	#else
		worldInvMat=inverse(mat3(u_WorldMat));
	#endif  
	v_Normal=a_Normal*worldInvMat;

	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)
		#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)
			v_Tangent=a_Tangent0.xyz*worldInvMat;
			v_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;
		#endif
	#endif

	#ifdef BONE
		v_PositionWorld=(u_WorldMat*position).xyz;
	#else
		v_PositionWorld=(u_WorldMat*a_Position).xyz;
	#endif
	
	v_ViewDir=u_CameraPos-v_PositionWorld;

	#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))
		v_Texcoord0=a_Texcoord0;
		#ifdef TILINGOFFSET
			v_Texcoord0=TransformUV(v_Texcoord0,u_TilingOffset);
		#endif
	#endif

	#ifdef LIGHTMAP
		#ifdef SCALEOFFSETLIGHTINGMAPUV
			#ifdef UV1
				v_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;
			#else
				v_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;
			#endif 
			v_LightMapUV.y=1.0-v_LightMapUV.y;
		#else
			#ifdef UV1
				v_LightMapUV=a_Texcoord1;
			#else
				v_LightMapUV=a_Texcoord0;
			#endif 
		#endif 
	#endif

	#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)
		v_Color=a_Color;
	#endif

	#ifdef RECEIVESHADOW
		v_posViewZ = gl_Position.w;
		#ifdef SHADOWMAP_PSSM1 
			v_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);
		#endif
	#endif
}

//--wmy-main-----------------
mat3 MATRIX_IT_MV(mat4 ModelViewMatrix) {
	return inverse(mat3(ModelViewMatrix));
}
mat3 getRotation(vec4 wTangent, vec3 wNormal) {
	vec3 binormal = cross(wNormal.xyz, wTangent.xyz) * wTangent.w;
	mat3 rotation = mat3(
		wTangent.x, -binormal.x, wNormal.x,
		wTangent.y, -binormal.y, wNormal.y,
		wTangent.z, binormal.z, wNormal.z);
	return rotation;
}
void wmyMain(){

g_worldNormal = v_Normal;g_worldViewDir = v_ViewDir;texUvCoord = vec2(a_Texcoord0);

}
//--wmy----------------------

void main()
{
	#ifdef CASTSHADOW
		main_castShadow();
	#else
		main_normal();
		wmyMain();
	#endif
}

]]></VS>
            <PS><![CDATA[
#ifdef HIGHPRECISION
	precision highp float;
#else
	precision mediump float;
#endif

#include "Lighting.glsl";

//--wmy-uniform+varying------

uniform vec4 _Color;uniform sampler2D _MainTex;uniform float _ToonEffect;uniform vec4 _Specular;uniform float _Gloss;

varying vec3 g_worldNormal;varying vec3 g_worldViewDir;varying vec2 texUvCoord;

//--wmy----------------------

uniform vec4 u_DiffuseColor;

#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)
	varying vec4 v_Color;
#endif

varying vec3 v_ViewDir; 

#ifdef ALPHATEST
	uniform float u_AlphaTestValue;
#endif

#ifdef DIFFUSEMAP
	uniform sampler2D u_DiffuseTexture;
#endif



#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))
	varying vec2 v_Texcoord0;
#endif

#ifdef LIGHTMAP
	varying vec2 v_LightMapUV;
	uniform sampler2D u_LightMap;
#endif

#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)
	uniform vec3 u_MaterialSpecular;
	uniform float u_Shininess;
	#ifdef SPECULARMAP 
		uniform sampler2D u_SpecularTexture;
	#endif
#endif

#ifdef FOG
	uniform float u_FogStart;
	uniform float u_FogRange;
	uniform vec3 u_FogColor;
#endif

varying vec3 v_Normal;
varying vec3 v_Position;

#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)
	uniform sampler2D u_NormalTexture;
	varying vec3 v_Tangent;
	varying vec3 v_Binormal;
#endif

#ifdef DIRECTIONLIGHT
	uniform DirectionLight u_DirectionLight;
#endif

#ifdef POINTLIGHT
	uniform PointLight u_PointLight;
#endif

#ifdef SPOTLIGHT
	uniform SpotLight u_SpotLight;
#endif

uniform vec3 u_AmbientColor;


#if defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)
	varying vec3 v_PositionWorld;
#endif

#include "ShadowHelper.glsl"
varying float v_posViewZ;
#ifdef RECEIVESHADOW
	#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)
		uniform mat4 u_lightShadowVP[4];
	#endif
	#ifdef SHADOWMAP_PSSM1 
		varying vec4 v_lightMVPPos;
	#endif
#endif

void main_castShadow()
{
	//gl_FragColor=vec4(v_posViewZ,0.0,0.0,1.0);
	gl_FragColor=packDepth(v_posViewZ);
	#if defined(DIFFUSEMAP)&&defined(ALPHATEST)
		float alpha = texture2D(u_DiffuseTexture,v_Texcoord0).w;
		if( alpha < u_AlphaTestValue )
		{
			discard;
		}
	#endif
}


//--wmy-main-----------------
vec4 lerpV4(vec4 a, vec4 b, float s) { return vec4(a + (b - a)*s); }
vec3 lerpV3(vec3 a, vec3 b, float s) { return vec3(a + (b - a)*s); }
vec2 lerpV2(vec2 a, vec2 b, float s) { return vec2(a + (b - a)*s); }
float lerpF(float a, float b, float s) { return float(a + (b - a) * s); }
float saturate(float n) { return clamp(n, 0.0, 1.0); }
vec3 UnpackNormal(vec4 packednormal) {
	// This do the trick
	packednormal.x *= packednormal.w;
	vec3 normal;
	normal.xy = packednormal.xy * 2.0 - 1.0;
	normal.z = sqrt(1.0 - saturate(dot(normal.xy, normal.xy)));
	return normal;
}
vec4 wmyMain(vec4 _mainColor, vec3 _globalDiffuse){
vec4 wmyColor=_mainColor;

	vec3 ambient = u_AmbientColor;	vec3 lightDir = normalize(u_DirectionLight.Direction.xyz);	float diff = max(0.0, dot(g_worldNormal, lightDir));	diff = (diff + 1.0) / 2.0;	diff = smoothstep(0.0, 1.0, diff);	diff = lerpF(diff, 1.0, _ToonEffect);	vec4 diffuseColor = texture2D(_MainTex, vec2(texUvCoord));	vec3 color = _Color.rgb * diffuseColor.rgb *  diff;	color *= u_DirectionLight.Color.rgb;	if (_Gloss > 0.0) {		vec3 viewDir = g_worldViewDir;		vec3 halfDir = normalize(viewDir + lightDir);		vec3 specular = vec3(0.0);		specular = _Specular.rgb * pow(max(dot(g_worldNormal, halfDir), 0.0), _Gloss);		color += specular;	}	color += ambient/2.0;	wmyColor = vec4(color, 1.0);

return wmyColor;
}
//--wmy----------------------

void main_normal()
{
	vec3 globalDiffuse=u_AmbientColor;
	#ifdef LIGHTMAP	
		globalDiffuse += DecodeLightmap(texture2D(u_LightMap, v_LightMapUV));
	#endif
	
	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)
		vec3 normal;
		#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)
			vec3 normalMapSample = texture2D(u_NormalTexture, v_Texcoord0).rgb;
			normal = normalize(NormalSampleToWorldSpace(normalMapSample, v_Normal, v_Tangent,v_Binormal));
		#else
			normal = normalize(v_Normal);
		#endif
		vec3 viewDir= normalize(v_ViewDir);
	#endif
	
	vec4 mainColor=u_DiffuseColor;
	#ifdef DIFFUSEMAP
		vec4 difTexColor=texture2D(u_DiffuseTexture, v_Texcoord0);
		mainColor=mainColor*difTexColor;
	#endif 
	#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)
		mainColor=mainColor*v_Color;
	#endif 
    
	#ifdef ALPHATEST
		if(mainColor.a<u_AlphaTestValue)
			discard;
	#endif
  
	
	vec3 diffuse = vec3(0.0);
	vec3 specular= vec3(0.0);
	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)
		vec3 dif,spe;
		#ifdef SPECULARMAP
			vec3 gloss=texture2D(u_SpecularTexture, v_Texcoord0).rgb;
		#else
			#ifdef DIFFUSEMAP
				vec3 gloss=vec3(difTexColor.a);
			#else
				vec3 gloss=vec3(1.0);
			#endif
		#endif
	#endif

	
	#ifdef DIRECTIONLIGHT
		LayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_DirectionLight,dif,spe);
		diffuse+=dif;
		specular+=spe;
	#endif
 
	#ifdef POINTLIGHT
		LayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_PointLight,dif,spe);
		diffuse+=dif;
		specular+=spe;
	#endif

	#ifdef SPOTLIGHT
		LayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_SpotLight,dif,spe);
		diffuse+=dif;
		specular+=spe;
	#endif
	
	#ifdef RECEIVESHADOW
		float shadowValue = 1.0;
		#ifdef SHADOWMAP_PSSM3
			shadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);
		#endif
		#ifdef SHADOWMAP_PSSM2
			shadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);
		#endif 
		#ifdef SHADOWMAP_PSSM1
			shadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);
		#endif
		//gl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse)*shadowValue,mainColor.a);
		gl_FragColor = wmyMain(mainColor,(globalDiffuse + diffuse * shadowValue * 1.1));
	#else
		//gl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse),mainColor.a);
		gl_FragColor = wmyMain(mainColor, globalDiffuse);
	#endif
  /*
	#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)
		#ifdef RECEIVESHADOW
			gl_FragColor.rgb+=specular*shadowValue;
		#else
			gl_FragColor.rgb+=specular;
		#endif
	#endif
	*/
	#ifdef FOG
		float lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);
		gl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);
	#endif
}

void main()
{
	#ifdef CASTSHADOW		
		main_castShadow();
	#else
		main_normal();
	#endif  
}
 
]]></PS>
        </Pass>
    </SubShader>
</WmyGlsl>